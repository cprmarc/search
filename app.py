# app.py
import streamlit as st
import openai
import urllib.parse
import os

# üîê OpenAI API kulcs be√°ll√≠t√°sa (biztons√°gosabban)
# Haszn√°ld a Streamlit secrets-et vagy k√∂rnyezeti v√°ltoz√≥t
try:
    # Pr√≥b√°ld meg a secrets-b≈ël
    openai.api_key = st.secrets["OPENAI_API_KEY"]
except:
    # Ha nincs secrets, akkor k√∂rnyezeti v√°ltoz√≥b√≥l
    openai.api_key = os.getenv("OPENAI_API_KEY")
    
# Ellen≈ërz√©s, hogy van-e API kulcs
if not openai.api_key:
    st.error("‚ö†Ô∏è Hi√°nyzik az OpenAI API kulcs! √Åll√≠tsd be a OPENAI_API_KEY k√∂rnyezeti v√°ltoz√≥t vagy a Streamlit secrets-ben.")
    st.stop()

# üìå OpenAI alap√∫ √©rtelmez√©s hibakezel√©ssel
def interpret_input(question: str):
    prompt = f"""A felhaszn√°l√≥ ingatlanhirdet√©st keres. Emeld ki a magyarorsz√°gi helysz√≠neket (telep√ºl√©sek, ker√ºletek), az ingatlan t√≠pus√°t (pl. h√°z, lak√°s), √©s a hozz√°vet≈ëleges alapter√ºletet (m2).
V√°laszolj egyetlen Python sz√≥t√°r form√°j√°ban az al√°bbi kulcsokkal: "locations" (lista), "type" (sztring), "size" (sz√°m, m2).
P√©lda:
K√©rd√©s: "Budapesten √©s √ârden keresek egy legal√°bb 100 n√©gyzetm√©teres h√°zat"
V√°lasz: {{ "locations": ["Budapest", "√ârd"], "type": "h√°z", "size": 100 }}
K√©rd√©s: "{question}"
V√°lasz:"""
    
    try:
        response = openai.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}],
            temperature=0
        )
        content = response.choices[0].message.content.strip()
        
        # Biztons√°gosabb eval helyett ast.literal_eval haszn√°lata
        import ast
        result = ast.literal_eval(content)
        return result
    except openai.AuthenticationError:
        st.error("‚ùå OpenAI API hiteles√≠t√©si hiba. Ellen≈ërizd az API kulcsot!")
        return {"locations": [], "type": "", "size": None}
    except openai.RateLimitError:
        st.error("‚è≥ API limit t√∫ll√©pve. Pr√≥b√°ld √∫jra k√©s≈ëbb!")
        return {"locations": [], "type": "", "size": None}
    except Exception as e:
        st.error(f"‚ùå Hiba t√∂rt√©nt: {str(e)}")
        return {"locations": [], "type": "", "size": None}

# üåê URL gener√°l√°s
def build_url(data):
    base_url = "https://zenga.hu/elado/ingatlan/"
    path_parts = []
    
    for loc in data["locations"]:
        path_parts.append(loc.replace(" ", "-").lower())
    
    if data["type"]:
        path_parts.append(data["type"].lower())
    
    if data["size"]:
        path_parts.append(f"{int(data['size'])}m2")
    
    path = "/".join(path_parts)
    full_url = base_url + path
    return full_url, path_parts

# üñºÔ∏è Streamlit UI
st.set_page_config(page_title="Ingatlan Keres≈ë AI", layout="centered")
st.title("Ingatlan keres≈ë AI üè°")

# API kulcs st√°tusz megjelen√≠t√©se
if openai.api_key:
    st.success("‚úÖ OpenAI API kapcsolat rendben")
else:
    st.error("‚ùå OpenAI API kulcs hi√°nyzik")

user_input = st.text_input(
    "√çrd ide, milyen ingatlant keresel", 
    placeholder="pl. Budapesten √©s √ârden keresek egy 100 n√©gyzetm√©teres h√°zat"
)

if user_input and openai.api_key:
    with st.spinner("√ârtelmezem a keres√©sed..."):
        parsed = interpret_input(user_input)
        
    if parsed and parsed["locations"]:
        url, visible_parts = build_url(parsed)
        preview = ", ".join(visible_parts)
        
        # Eredm√©ny megjelen√≠t√©se
        st.success(f"üéØ Tal√°lat: {preview}")
        st.markdown(f"üîó [Keres√©s ind√≠t√°sa]({url})")
        
        # Debug inform√°ci√≥ (opcion√°lis)
        with st.expander("üîç √ârtelmezett adatok"):
            st.json(parsed)
    else:
        st.warning("‚ùì Nem siker√ºlt √©rtelmezni a keres√©st. Pr√≥b√°ld meg konkr√©tabban megfogalmazni!")

# Haszn√°lati √∫tmutat√≥
with st.expander("üìñ Haszn√°lati √∫tmutat√≥"):
    st.markdown("""
    **P√©ld√°k helyes haszn√°latra:**
    - "Budapesten keresek lak√°st"
    - "Debrecenben 80 n√©gyzetm√©teres h√°zat szeretn√©k"
    - "Budapest 13. ker√ºletben vagy Szentendr√©n keresek ingatlant"
    - "Minimum 120 m2-es csal√°di h√°z Szegeden"
    
    **API kulcs be√°ll√≠t√°sa:**
    1. Streamlit Cloud-on: secrets.toml f√°jlban add meg: `OPENAI_API_KEY = "sk-..."`
    2. Lok√°lisan: √°ll√≠tsd be a `OPENAI_API_KEY` k√∂rnyezeti v√°ltoz√≥t
    """)
